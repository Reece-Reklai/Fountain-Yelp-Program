image: gitlab.cs.wallawalla.edu:5050/pridja/catch2-example:latest

stages:
  - analysis
  - build
  - test
  - coverage
  - deploy_web
  - deploy_prod

check_formatting:
  stage: analysis
  script:
    - echo `which clang-format-6.0`
    - ln -s `which clang-format-6.0` /usr/bin/clang-format
    - echo $CI_PROJECT_DIR
    - cd "$CI_PROJECT_DIR"
    - linter_errors=$(git-clang-format-6.0 --commit "HEAD~1" -q --diff | grep -v --color=never "no modified files to format" || true)
    - echo "$linter_errors"
    - if [ ! -z "$linter_errors" ]; then echo "Detected formatting issues; please fix"; exit 1; else echo "Formatting is correct"; exit 0; fi

run_cpplint:
  stage: analysis
  script:
    - cpplint ./src/main.cpp
    - find -name '*.h' -exec cpplint {} +
    - find -name '*.cpp' -exec cpplint {} +

run_cppcheck:
  stage: analysis
  script:
    - find -name '*.h' -exec cppcheck --enable=all --suppress=missingIncludeSystem --language=c++ {} +
    - find -name '*.cpp' -exec cppcheck --enable=all --suppress=missingIncludeSystem --language=c++ {} +


build_programs:
  stage: build
  before_script:
    - apt-get -qq update
    - apt-get -qq install -y zip unzip
  script:
    - mkdir build
    - cd build
    - cmake ..
    - make
    - zip -r kimgab.zip ${CI_PROJECT_DIR}
  artifacts:
    paths:
      - build/main
      - build/tests
      - build/Users.txt
      - build/Fountains.txt
      - build/Review.txt
      - kimgab.zip
    expire_in: 1 hour

tests:
  stage: test
  script:
    - build/tests [fountain]
    - cd build
    - ./tests [campus]

code_coverage:
  stage: coverage
  script:
    - mkdir -p build && cd build
    - cmake .. -DGENERATE_CODE_COVERAGE=true
    - make tests
    - ./tests
    - cd CMakeFiles/tests.dir
    - mkdir -p cov
    - find -name '*.o' -exec cp -t cov {} +
    - find -name '*.gcno' -exec cp -t cov {} +
    - find -name '*.gcda' -exec cp -t cov {} +
    - cd cov || exit 1
    - find -name '*.o' -exec gcov -bf {} \; > /dev/null
    - lcov --quiet --capture --directory . --output-file coverage.info
    - lcov --quiet --remove coverage.info "*include*" -o coverage.info
    - lcov --list coverage.info
    - echo "Generating HTML Report"
    - genhtml coverage.info --output-directory out
    - echo "You can download the report from the pipleine artifacts in gitlab for the next week"
  artifacts:
    paths:
      - build/CMakeFiles/tests.dir/cov/out/
    expire_in: 7 days

variables:
  JEKYLL_ENV: production
  LC_ALL: C.UTF-8

test:
  image: ruby:2.3
  stage: test
  script:
    - bundle install
    - cd docs
    - bundle exec jekyll build -d ../test
  artifacts:
    paths:
      - test
  except:
    - platan/cd

pages:
  image: ruby:2.3
  stage: deploy_web
  script:
    - bundle install
    - cd docs
    - bundle exec jekyll build -d ../public
    - echo $CI_PAGES_URL
  artifacts:
    paths:
      - public
  only:
    - platan/cd

deploy_prod:
  stage: deploy_prod
  before_script:
    - apt-get -qq update
    - apt-get -qq -y install curl
    - 'which ssh-agent || ( apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d -w 0)
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ELF_NAME="${CI_PROJECT_NAMESPACE}-ex.zip"
    # Double quotes around everything needed as it has a colon in it
    - "SSH_COMMAND_STRING=\"curl --location --header 'PRIVATE-TOKEN: ${API_TOKEN}' '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/artifacts/${CI_BUILD_REF_NAME}/raw/kimgab.zip?job=build_archive' --output ${ELF_NAME}\" "
    # Print it out so we can see what happened for debugging purposes.
    - echo "$SSH_COMMAND_STRING"
    # Execute the deploy
    - ssh $SSH_USER@$SSH_HOST "${SSH_COMMAND_STRING}"
  when: manual
  only:
    - platan/cd

